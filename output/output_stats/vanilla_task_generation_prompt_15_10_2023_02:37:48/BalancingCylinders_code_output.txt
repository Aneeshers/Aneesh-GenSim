import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class BalancingCylinders(Task):
    """Pick up and balance a series of cylinders of varying sizes on top of one another, 
    with the largest at the base and the smallest at the top, without any of them falling over."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "balance the {size} cylinder on top of the stack"
        self.task_completed_desc = "done balancing cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define cylinder sizes
        sizes = ['large', 'medium', 'small']
        size_values = [(0.04, 0.04, 0.08), (0.03, 0.03, 0.06), (0.02, 0.02, 0.04)]

        # Add cylinders
        cylinders = []
        for i in range(3):
            size = size_values[i]
            pose = self.get_random_pose(env, size)
            replace = {'DIM': size, 'HALF': (size[0] / 2, size[1] / 2, size[2] / 2)}
            cylinder_urdf = self.fill_template('cylinder/cylinder-template.urdf', replace)
            cylinder_id = env.add_object(cylinder_urdf, pose)
            cylinders.append(cylinder_id)

        # Define target poses for the cylinders
        base_pose = p.getBasePositionAndOrientation(cylinders[0])
        targ_poses = [base_pose]
        for i in range(1, 3):
            prev_size = size_values[i-1]
            curr_size = size_values[i]
            targ_pose = (base_pose[0][0], base_pose[0][1], base_pose[0][2] + prev_size[2] + curr_size[2]/2)
            targ_poses.append((targ_pose, base_pose[1]))

        # Add goals
        for i in range(3):
            language_goal = self.lang_template.format(size=sizes[i])
            self.add_goal(objs=[cylinders[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]], replace=False,
                rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)