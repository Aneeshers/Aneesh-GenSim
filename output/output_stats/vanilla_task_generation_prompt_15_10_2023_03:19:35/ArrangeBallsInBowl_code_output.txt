import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class ArrangeBallsInBowl(Task):
    """Pick up differently colored balls and arrange them in a specific color pattern in the bowl."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "arrange the balls in the bowl in the order of {order}"
        self.task_completed_desc = "done arranging balls."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add bowl.
        bowl_size = (0.12, 0.12, 0)
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Add balls.
        ball_size = (0.04, 0.04, 0.04)
        ball_template = 'ball/ball-template.urdf'
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        balls = []
        for color in colors:
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'DIM': ball_size, 'HALF': ball_size[0] / 2, 'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

        # Goal: balls are arranged in the bowl in a specific color pattern.
        color_order = ['red', 'green', 'blue', 'yellow', 'purple']
        language_goal = self.lang_template.format(order=', '.join(color_order))
        self.add_goal(objs=balls, matches=np.eye(len(balls)), targ_poses=[bowl_pose]*len(balls), replace=False,
                      rotations=False, metric='pose', params=None, step_max_reward=1, language_goal=language_goal)