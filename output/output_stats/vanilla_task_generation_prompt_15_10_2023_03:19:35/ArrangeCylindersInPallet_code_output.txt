import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class ArrangeCylindersInPallet(Task):
    """Pick up differently colored cylinders and arrange them in a specific color pattern in the pallet."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "arrange the cylinders in the pallet in the following color pattern: {pattern}"
        self.task_completed_desc = "done arranging cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add pallet.
        pallet_size = (0.15, 0.15, 0.02)
        pallet_pose = self.get_random_pose(env, pallet_size)
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')

        # Add cylinders.
        cylinder_size = (0.02, 0.02, 0.06)
        cylinder_template = 'cylinder/cylinder-template.urdf'
        colors = ['red', 'green', 'blue', 'yellow', 'purple']
        cylinders = []
        for color in colors:
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'DIM': cylinder_size, 'HALF': (cylinder_size[0] / 2, cylinder_size[1] / 2, cylinder_size[2] / 2), 'COLOR': utils.COLORS[color]}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Goal: cylinders are arranged in the pallet in a specific color pattern.
        pattern = ['red', 'green', 'blue', 'yellow', 'purple']
        language_goal = self.lang_template.format(pattern=pattern)
        self.add_goal(objs=cylinders, matches=np.ones((len(cylinders), 1)), targ_poses=[pallet_pose]*len(cylinders), replace=False,
                rotations=True, metric='pose', params=None, step_max_reward=1/len(cylinders), language_goal=language_goal)