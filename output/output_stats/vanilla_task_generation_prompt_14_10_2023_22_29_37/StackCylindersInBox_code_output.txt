import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils


class StackCylindersInBox(Task):
    """Sequentially stack 4 differently colored cylinders of different sizes inside a box to form a tower."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "stack the {color} cylinder in the box"
        self.task_completed_desc = "done stacking cylinders in box."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add box.
        box_size = (0.1, 0.1, 0.1)
        box_pose = self.get_random_pose(env, box_size)
        env.add_object('box/box-template.urdf', box_pose, 'fixed')

        # Add cylinders.
        colors = ['red', 'blue', 'green', 'yellow']
        sizes = [(0.02, 0.02, 0.04), (0.025, 0.025, 0.05), (0.03, 0.03, 0.06), (0.035, 0.035, 0.07)]
        cylinders = []
        for i in range(4):
            cylinder_pose = self.get_random_pose(env, sizes[i])
            cylinder_id = env.add_object('cylinder/cylinder-template.urdf', cylinder_pose, color=colors[i])
            cylinders.append(cylinder_id)

        # Goal: stack cylinders in the box in a specific order.
        matches = np.zeros((4, 4))
        for i in range(3):
            matches[i, i+1] = 1
        targ_poses = [box_pose] * 4
        replace = False
        rotations = True
        metric = 'pose'
        params = None
        step_max_reward = 1 / 4
        language_goals = [self.lang_template.format(color=colors[i]) for i in range(4)]
        self.add_goal(objs=cylinders, matches=matches, targ_poses=targ_poses, replace=replace,
                      rotations=rotations, metric=metric, params=params, step_max_reward=step_max_reward,
                      language_goal=language_goals)