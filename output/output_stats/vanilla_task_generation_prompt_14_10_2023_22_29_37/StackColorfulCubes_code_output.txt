import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils


class StackColorfulCubes(Task):
    """Sequentially stack 5 differently colored cubes of different sizes in a specific order to form a tower."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "stack the {color} cube on top of the {prev_color} cube"
        self.task_completed_desc = "done stacking colorful cubes."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the colors and sizes of the cubes.
        colors = ['red', 'blue', 'green', 'yellow', 'purple']
        sizes = [(0.04, 0.04, 0.04), (0.05, 0.05, 0.05), (0.06, 0.06, 0.06), (0.07, 0.07, 0.07), (0.08, 0.08, 0.08)]

        # Shuffle the colors and sizes to create random order.
        np.random.shuffle(colors)
        np.random.shuffle(sizes)

        # Add the base for stacking.
        base_size = (0.1, 0.1, 0.01)
        base_pose = self.get_random_pose(env, base_size)
        env.add_object('stacking/stand.urdf', base_pose, category='fixed')

        # Initialize the previous cube pose.
        prev_cube_pose = base_pose

        # Add the cubes in the specified order.
        cubes = []
        for i in range(5):
            color = colors[i]
            size = sizes[i]

            # Get the pose for the current cube.
            cube_pose = self.get_random_pose(env, size)
            cube_pose[0][2] = prev_cube_pose[0][2] + size[2] + 0.001

            # Add the cube to the environment.
            cube_id = env.add_object('stacking/block.urdf', cube_pose, color=utils.COLORS[color])
            cubes.append(cube_id)

            # Set the current cube pose as the previous cube pose for the next iteration.
            prev_cube_pose = cube_pose

            # Add the goal for stacking the current cube on top of the previous cube.
            prev_color = colors[i-1] if i > 0 else 'base'
            language_goal = self.lang_template.format(color=color, prev_color=prev_color)
            self.add_goal(objs=[cube_id], matches=np.ones((1, 1)), targ_poses=[cube_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1, language_goal=language_goal)

        # Set the final cube as the goal for completing the task.
        final_color = colors[-1]
        final_cube_id = cubes[-1]
        final_cube_pose = env.get_pose(final_cube_id)
        final_language_goal = f"stack the {final_color} cube on top of the tower"
        self.add_goal(objs=[final_cube_id], matches=np.ones((1, 1)), targ_poses=[final_cube_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1, language_goal=final_language_goal)