import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class CylinderPalletArrangement(Task):
    """Arrange different colored cylinders on a pallet in a specific pattern."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "arrange the cylinders on the pallet in a {pattern}"
        self.task_completed_desc = "done arranging cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add pallet.
        pallet_size = (0.3, 0.3, 0.01)
        pallet_pose = self.get_random_pose(env, pallet_size)
        env.add_object('pallet/pallet.urdf', pallet_pose, 'fixed')

        # Add cylinders.
        n_cylinders = 5
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_size = (0.02, 0.02, 0.1)
        cylinders = []
        for _ in range(n_cylinders):
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            replace = {'DIM': cylinder_size, 'HALF': (cylinder_size[0] / 2, cylinder_size[1] / 2, cylinder_size[2] / 2)}
            cylinder_urdf = self.fill_template(cylinder_template, replace)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Goal: cylinders are arranged on the pallet in a specific pattern.
        pattern = "color gradient"  # or "specific shape"
        language_goal = self.lang_template.format(pattern=pattern)
        self.add_goal(objs=cylinders, matches=np.ones((n_cylinders, 1)), targ_poses=[pallet_pose], replace=False,
                rotations=True, metric='pose', params=None, step_max_reward=1 / n_cylinders, language_goal=language_goal)