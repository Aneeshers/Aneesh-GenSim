import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class CylinderBallStack(Task):
    """Pick up the green ball and place it on top of a red cylinder standing upright on the tabletop without tipping it over."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "place the green ball on top of the red cylinder"
        self.task_completed_desc = "done stacking ball on cylinder."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add cylinder.
        cylinder_size = (0.05, 0.05, 0.1)  # x, y, z dimensions for the asset size
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        cylinder_template = 'cylinder/cylinder-template.urdf'
        replace = {'DIM': cylinder_size, 'HALF': (cylinder_size[0] / 2, cylinder_size[1] / 2, cylinder_size[2] / 2)}
        cylinder_urdf = self.fill_template(cylinder_template, replace)
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose, 'fixed')

        # Add ball.
        ball_size = (0.05, 0.05, 0.05)  # x, y, z dimensions for the asset size
        ball_pose = self.get_random_pose(env, ball_size)
        ball_template = 'ball/ball-template.urdf'
        replace = {'DIM': ball_size, 'HALF': (ball_size[0] / 2, ball_size[1] / 2, ball_size[2] / 2)}
        ball_urdf = self.fill_template(ball_template, replace)
        ball_id = env.add_object(ball_urdf, ball_pose)

        # Goal: the ball is on top of the cylinder.
        targ_pose = (cylinder_pose[0], cylinder_pose[1], cylinder_pose[2] + cylinder_size[2] + ball_size[2] / 2)
        self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[targ_pose], replace=False,
                rotations=False, metric='pose', params=None, step_max_reward=1, language_goal=self.lang_template)