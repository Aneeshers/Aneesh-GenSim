import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class CylinderLineFollowing(Task):
    """Pick up cylinders of different colors and place them along the single green line in the order of the colors in the rainbow."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "place the {color} cylinder on the green line"
        self.task_completed_desc = "done placing cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add green line.
        line_size = (0.12, 0.01, 0.01)
        line_pose = self.get_random_pose(env, line_size)
        env.add_object('line/single-green-line-template.urdf', line_pose, 'fixed')

        # Cylinder colors.
        colors = [
            utils.COLORS['purple'], utils.COLORS['blue'], utils.COLORS['green'],
            utils.COLORS['yellow'], utils.COLORS['orange'], utils.COLORS['red']
        ]

        # Add cylinders.
        cylinder_size = (0.04, 0.04, 0.04)
        cylinder_urdf = 'cylinder/cylinder-template.urdf'

        objs = []
        for i in range(6):
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            cylinder_id = env.add_object(cylinder_urdf, cylinder_pose, color=colors[i])
            objs.append(cylinder_id)

        # IMPORTANT Associate placement locations for goals.
        place_pos = [(0, -0.05, 0.03), (0, 0, 0.03),
                     (0, 0.05, 0.03), (0, -0.025, 0.08),
                     (0, 0.025, 0.08), (0, 0, 0.13)]
        targs = [(utils.apply(line_pose, i), line_pose[1]) for i in place_pos]

        # Goal: cylinders are placed on the line in the order of the colors in the rainbow.
        for i in range(6):
            language_goal = self.lang_template.format(color=utils.COLOR_NAMES[colors[i]])
            self.add_goal(objs=[objs[i]], matches=np.ones((1, 1)), targ_poses=[targs[i]], replace=False,
                    rotations=True, metric='pose', params=None, step_max_reward=1 / 6, symmetries=[np.pi/2]*1, language_goal=language_goal)