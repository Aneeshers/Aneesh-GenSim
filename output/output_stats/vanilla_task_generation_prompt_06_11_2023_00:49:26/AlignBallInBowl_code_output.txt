import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class AlignBallInBowl(Task):
    """Pick up balls of different colors and place them in a single bowl such that the balls are aligned from left to right in the order of the color spectrum (red, orange, yellow, green, blue, indigo, and violet)."""

    def __init__(self):
        super().__init__()
        self.max_steps = 7
        self.lang_template = "place the {color} ball in the bowl"
        self.task_completed_desc = "done aligning balls in bowl."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Add bowl.
        bowl_size = (0.12, 0.12, 0)
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_urdf = 'bowl/bowl.urdf'
        env.add_object(bowl_urdf, bowl_pose, 'fixed')

        # Ball colors.
        colors = [
            utils.COLORS['red'], utils.COLORS['orange'], utils.COLORS['yellow'],
            utils.COLORS['green'], utils.COLORS['blue'], utils.COLORS['indigo'],
            utils.COLORS['violet']
        ]

        # Add balls.
        ball_size = (0.04, 0.04, 0.04)
        ball_template = 'ball/ball-template.urdf'
        objs = []
        for i in range(7):
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'DIM': ball_size, 'HALF': (ball_size[0] / 2, ball_size[1] / 2, ball_size[2] / 2), 'COLOR': colors[i]}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            objs.append(ball_id)

        # Goal: balls are placed in the bowl in the order of the color spectrum.
        for i in range(7):
            language_goal = self.lang_template.format(color=list(utils.COLORS.keys())[i])
            self.add_goal(objs=[objs[i]], matches=np.ones((1, 1)), targ_poses=[bowl_pose], replace=False,
                rotations=True, metric='pose', params=None, step_max_reward=1 / 7, language_goal=language_goal)